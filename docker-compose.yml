version: '3.5'
services:
  verifier:
    image: vergauwennico/livepeer-verifier:v1
    volumes:
      - 'v_broadcaster:/root/stream'
      - 'v_verifier:/logs'
    ports:
      - 5000:5000
    command: 'scripts/api.py verifier'
  loki:
    image: 'grafana/loki:latest'
    command:
      - '-config.file=/etc/loki/local-config.yaml'
    ports:
      - '3100:3100'
    restart: unless-stopped
    volumes:
      - './grafana/loki.yml:/etc/loki/local-config.yaml'
  logspout:
    image: 'darkdragon/logspout-loki:latest'
    command:
      - /bin/logspout
      - 'loki://loki:3100/api/prom/push?filter.sources=stdout%2Cstderr'
    labels:
      logspout.exclude: 'true'
    environment:
      EXCLUDE_LABEL: logspout.exclude
    restart: unless-stopped
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
  broadcaster:
    image: livepeer/go-livepeer:mainnet
    command: '-broadcaster -network ${ETHEREUM_NETWORK} -ethPassword ${ETHEREUM_PASSPHRASE} -monitor -rtmpAddr broadcaster:1935 -httpAddr broadcaster:8935 -cliAddr broadcaster:7935 ${BROADCASTER_CFG}'
    ports:
      - 1935:1935
      - 8935:8935
    volumes:
      - 'v_broadcaster:/root/.lpData'
      - '${KEYSTORE_DIR}:/root/.lpData/${ETHEREUM_NETWORK}/keystore'
    restart: on-failure
  streamtester:
    image: livepeer/streamtester:v0.8.7
    command: './streamtester -server -serverAddr streamtester:3001'
    ports: 
      - '3001:3001'
    depends_on: 
      - broadcaster
    restart: on-failure
  stream-sender:
    build:
      context: ./stream-sender
    command: '-server streamtester:3001 -broadcaster broadcaster -http stream-sender:5000 -interval ${STREAMING_INTERVAL} -simultaneous ${CONCURRENT_STREAMS}'
    depends_on:
      - broadcaster
      - streamtester
    ports:
      - 3002:5000
    volumes:
      - 'v_stream_sender:/tmp/streamtester'
    restart: on-failure
  dashboard:
    depends_on: 
      - stream-sender
    build:
      context: ./dashboard
      args:
        base_url: ${STREAMSENDER_EXTERNAL_URL}
    ports:
      - 3003:80
  cadvisor:
    image: 'google/cadvisor:latest'
    ports:
      - '8080:8080'
    restart: on-failure
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/dev/disk/:/dev/disk:ro'
      - '/dev/kmsg:/dev/kmsg:ro'
    depends_on: 
      - broadcaster
  node-exporter:
    image: 'prom/node-exporter:latest'
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - >-
        --collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"
      - >-
        --collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse.lxc|mqueue)(fs|)$$"
    restart: unless-stopped
    volumes:
      - '/proc:/host/proc:ro'
      - '/sys:/host/sys:ro'
      - '/:/rootfs:ro'
    depends_on: 
      - broadcaster
  lpmonitoring:
    image: livepeer/monitoring:latest
    command: 
      - '--mode=docker-compose'
      - '--nodes=broadcaster:7935,orchestrator:7935,transcoder:7935'
      - '--cadvisor-port=8080'
      - '--node-exporter-port=9100'
      - '--prometheus-storagePath=/data/prometheus'
      - '--prometheus-externalUrl=http://localhost:9090/'
    restart: unless-stopped
    environment:
      LP_PROMETHEUS_ENDPOINT: 'http://localhost:9090/'
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_AUTH_ANONYMOUS_ENABLED: 'True'
      GF_AUTH_ANONYMOUS_ORG_NAME: Main Org.
      GF_AUTH_ANONYMOUS_ORG_ROLE: Editor # use Viewer for production
    depends_on:
      - broadcaster
      - node-exporter
      - cadvisor
    ports:
      - '9090:9090'
      - '3004:3000'
volumes:
  v_verifier: {}
  v_broadcaster: {}
  v_stream_sender: {}
